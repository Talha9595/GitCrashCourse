#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      https://opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

/* uncomment the following lines to enable debugging */
#debug_mode=yes

log_level=4
xlog_level=3
log_stderror=no
log_facility=LOG_LOCAL0

udp_workers=10
server_header="Server: Key-Switch-local"
user_agent_header="User-Agent: Key-Switch"
/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes


socket=udp:0.0.0.0:5060  # CUSTOMIZE ME
socket=udp:10.174.156.178:5060

#listen=udp:127.0.0.1:5060


####### Modules Section ########

#set module path
mpath="/usr/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")
modparam("usrloc", "db_url",
        "mysql://opensips:Talha1234@localhost/opensips")

####SIP-I############

loadmodule "sip_i.so"
modparam("sip_i", "isup_mime_str", "application/ISUP;base=itu-t92+;version=itu-t")
modparam("sip_i", "country_code", "+4")

#######Permissions module########
loadmodule "permissions.so"
modparam("permissions", "db_url",
        "mysql://opensips:Talha1234@localhost/opensips") #

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "received_avp", "$avp(received_nh)")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "db_url",
        "mysql://opensips:Talha1234@localhost/opensips") # CUSTOMIZE ME
#modparam("acc", "extra_fields", "db: src->src; dst->dst;src_ip->src_ip")
modparam("acc", "extra_fields", "db: src->src; dst->dst; src_ip->src_ip; hdr_lac->hdr_lac;isup_lac->isup_lac")


#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "uri_uriuser_column", "username")
modparam("auth_db", "password_column", "password")
modparam("auth_db", "db_url",
        "mysql://opensips:Talha1234@localhost/opensips") # CUSTOMIZE ME
modparam("auth_db", "load_credentials", "")

#### ALIAS module
loadmodule "alias_db.so"
modparam("alias_db", "db_url",
        "mysql://opensips:Talha1234@localhost/opensips") # CUSTOMIZE ME

#### DOMAIN module
loadmodule "domain.so"
modparam("domain", "db_url",
        "mysql://opensips:Talha1234@localhost/opensips") # CUSTOMIZE ME
modparam("domain", "db_mode", 1)   # Use caching
modparam("auth_db|usrloc", "use_domain", 1)

#### PRESENCE modules
/*loadmodule "xcap.so"
loadmodule "presence.so"
loadmodule "presence_xml.so"
modparam("xcap|presence", "db_url",
        "mysql://opensips:Talha1234@localhost/root") # CUSTOMIZE ME
modparam("presence_xml", "force_active", 1)
modparam("presence", "fallback2db", 0)  */

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url",
        "mysql://opensips:Talha1234@localhost/opensips") # CUSTOMIZE ME


####  NAT modules
/*loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 10)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", "SIP_PING_FLAG")
modparam("nathelper", "sipping_from", "sip:pinger@127.0.0.1") #CUSTOMIZE ME
modparam("nathelper", "received_avp", "$avp(received_nh)")
*/


#### RTPPROXY module

/*loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "udp:localhost:12221") # CUSTOMIZE ME

*/

#### RTPENGINE module
loadmodule "rtpengine.so"
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")



loadmodule "avpops.so"
modparam("avpops", "db_url","mysql://opensips:Talha1234@localhost/opensips")
####  DIALPLAN module
loadmodule "dialplan.so"
modparam("dialplan", "db_url",
        "mysql://opensips:Talha1234@localhost/opensips") # CUSTOMIZE ME

####  DYNAMMIC ROUTING module
/*loadmodule "drouting.so"
modparam("drouting", "db_url",
        "mysql://opensips:Talha1234@localhost/opensips") # CUSTOMIZE ME
*/
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"



loadmodule "load_balancer.so"
modparam("load_balancer", "db_url",
        "mysql://opensips:Talha1234@localhost/opensips") # CUSTOMIZE ME
modparam("load_balancer", "probing_method", "OPTIONS")
modparam("load_balancer", "probing_interval", 5)
modparam("load_balancer", "probing_from", "sip:SBC@192.168.3.66:5060")
modparam("load_balancer", "probing_reply_codes", "501,404,401")
modparam("load_balancer", "probing_verbose", 1)


loadmodule "userblacklist.so"
modparam("userblacklist", "db_url", "mysql://opensips:Talha1234@localhost/opensips")
modparam("userblacklist", "db_table", "userblacklist")
modparam("userblacklist", "use_domain", 0)
# main request routing logic

loadmodule "topology_hiding.so"


#### HTTPD module
loadmodule "httpd.so"
modparam("httpd", "ip", "127.0.0.1")

#### MI HTTP module
loadmodule "mi_http.so"






####### Routing Logic ########

# main request routing logic
route{

        # initial NAT handling; detect if the request comes from behind a NAT
        # and apply contact fixing


        xlog("L_INFO", "New request - M=$rm RURI=$ru F=$fu T=$tu IP=$si  RD=$rd ID=$ci\n");
        if (!mf_process_maxfwd_header(10)) {

                  sl_send_reply(483,"to many hopes");
                  xlog("L_ERR","to many hops");
                  exit;
        }

####Sequential request and option request##########
         if (is_method("OPTIONS")) {
                # xlog("L_INFO", "New Option - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
                if ( $(si{ip.matches,192.168.3.66/32})==1 )
                  {
                        xlog("L_INFO","NTC Trunk IP=$si ..... OK \r\n ");
                        send_reply(200,"OK");
                        exit;
                }

                 send_reply(200,"OK");
                 exit;
         }


        if (has_totag()) {
                if (topology_hiding_match()) {
                        xlog("Succesfully matched this request to a topology hiding dialog. \n");
                        xlog("Calller side callid is $ci \n");
                        xlog("Callee side callid  is $TH_callee_callid \n");
                        t_relay();
                        exit;
                }

                if ( is_method("ACK") && t_check_trans() ) {
                        route(1);
                        exit;
                }

                # sequential request within a dialog should
                # take the path determined by record-routing
                if ( !loose_route() ) {
                        send_reply(404,"Not here");
                        exit;
                }

                if (is_method("BYE")) {
                # do accounting even if the transaction fails
                do_accounting("log","failed");
                #xlog("L_INFO", "BYE request - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
                }


                route(1);
                exit;
        }


         if (loose_route()) {
                xlog("L_ERR","[$fU $tU $ci $rm] Attempt to route with preloaded Route's");
               # remove_hf("Route");
                send_reply(403,"Not here");
                exit;
          }

         if (!is_method("REGISTER")){
                record_route();
         }

        # ------------------------------------------------------------------------
        # Call Type Processing Section
        # -------------------------------------------------------------


        if (!is_myself("$rd")) {

                send_reply(403,"Relay Forbidden");
                exit;
        }

        t_check_trans();
        if (is_method("CANCEL")){

                if(t_check_trans()){
                        if(!t_relay()){
                                xlog("L_INFO","Error relaying message route[1]\n");
                                sl_reply_error();
                        }
                         exit;
                        }

        }


        if(is_method("ACK")){
                route(1);
                exit;
        }

        if(is_method("INVITE")){

                $acc_extra(src)=$fU;

                $acc_extra(dst)=$tU;
                $acc_extra(src_ip)=$si;
                $acc_extra(hdr_lac)=$hdr(P-Access-Network-Info);
                $acc_extra(isup_lac)=$isup_param(Location Number);
                do_accounting("db", "cdr");
                #do_accounting("log", "cdr");


                if (is_present_hf("X-OUTBOUND")){

                        xlog("L_INFO", "From X-OUTBOUND Present");
                        if (!check_address(2,"$si",$sp,"$socket_in(proto)")) {
                        xlog("L_INFO", "Un Authorized Outbound - M=$rm RURI=$ru F=$fu T=$tu IP=$si:$sp Proto:$proto ID=$ci\r\n");
                        sl_send_reply(404,"Not Found");
                        exit;

                        }
                route(outbound);
               }
#### ### Disable for testing########################################33
        if (!check_user_blacklist("$fU", "$fu")){
                        xlog("L_INFO", "Black List -  F=$fu  Contact=$hdr(Contact) ID=$ci\r\n");
                        sl_send_reply(403, "Forbidden");
                        exit;
               }

####
#########Disab;e for tesing############33

#               if(!check_address(1,"$si",$sp,"$socket_in(proto)",$avp(context),"$rU")){
#                       xlog("L_INFO", "Un Authorized Attempt - M=$rm RURI=$ru F=$fu T=$tu IP=$si:$sp Proto:$proto ID=$ci\n");
#                       sl_send_reply(404,"Not Found");
#                       exit;
#               }
                #xlog("L_INFO", "Invite Request - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
#               route(check_Lac);
                route(3);
                exit;
        }

        if(is_method("REGISTER")){
        xlog("Registration Request Reciev");
                route(2);
                exit;
        }




route(1);

}



route[1]
{
        if(!t_relay()){
        sl_reply_error();

        }
        xlog("L_INFO", "Relaied request - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");

        exit;
}


route[2]
{
        if ( $proto == "TCP")
        { 
        #setflag(TCP_PERSISTENT);
        }
        if(!www_authorize("","subscriber")){
                   www_challenge("","auth");
                   exit;
        }
        /*
        if(!db_is_to_authorized("uri") ){
                        sl_send_reply(401,"Unauthorized");
                        exit;
                } */

        if($au!=$tU) {
                        send_reply(403,"Forbidden auth ID");
                        exit;
                }


        #consume_credentials();

         if(!save("location")){
                       # sl_send_error();
                        xlog("L_ERR","Attempt to route with preloaded Route's [$ru/$fu/$fd/$rd]");
                }       
         xlog("save location");
         save("location");
         xlog("L_INFO","[$fU $tU $ci $rm] Request Received from $pr:$si:$sp User-Agent:$ua");
         xlog("L_INFO","[$fU $tU $ci $rm] Request message $rs:$rr received \n");
}
route[3]
{
        #-------------------------------------------------------
        #Invite messag handler
        #--------------------------------------------------------


#       xlog("In invite section");
#        if($tU =="04235909293"  || $tU== "9245000")
      remove_body_part("application/isup");
#       $rd = "10.109.5.230";
#       t_on_reply("1");
#       t_relay();
#       exit;


  if(!avp_db_query("select lb_group from opensips.lb_group where DNIS='$tU' and active='Y' limit 1","$avp(group_id)")){
        xlog("L_INFO","Group Id is not found for DNIS:$tU");
        sl_send_reply(500,"Destination Not Found");
        exit;
 }
   xlog("L_INFO","Group Id is:[$avp(group_id)]");

       append_hf("X-TrunkIn:$si\r\n");
       t_on_reply("1");
       create_dialog();
       route(incoming_route_media);
       topology_hiding("UC");
       t_on_failure("next_node");
      # load_balance($avp(group_id),"transc;pstn");
      lb_start($(avp(group_id){s.int}),"transc;pstn");
        #lb_start($avp(group_id),"transc;pstn");
        if ($retcode<0) {
             xlog("RTN Code for lb : $retcode");
             sl_send_reply(500,"Destination Not Found");
             exit;
        }
       $avp(du)=$du;
       xlog("Selected destination is: $du ID=$ci \r\n");
       t_relay();
       exit;

}

failure_route[next_node] {
        if (t_was_cancelled()) {
           exit;
        }

        if (t_check_status("(408)|([56][0-9][0-9])")) {
                xlog("LB attempt Faild: $rd/$avp(du) detected \n");
        #        lb_disable_dst();
                if ( lb_next() ) {
                        xlog("New Selected destination is: $du  ID=$ci \r\n");
                        $avp(du)=$du;
                        t_on_reply("1");
                        t_on_failure("next_node");
                        t_relay();
                        exit;
                }
                send_reply(500,"Destination Not Found");
                }
  }



onreply_route[1]
{

xlog("L_INFO", "Reply - S=$rs D=$rr F=$fu T=$tu IP=$si ID=$ci\r\n");
exit;

}


route[check_Lac]
{
        if(is_present_hf("P-Access-Network-Info")){
                append_hf("X-Location_p:$hdr(P-Access-Network-Info)\r\n");
                xlog("L_INFO","P-Access-Network: $hdr(P-Access-Network-Info) For $hdr(Contact) ID=$ci");
         }

        else {
                  xlog("L_INFO","P-Access-Network-Info Header  Not Found ID=$ci \r\n");
                  if (has_body("application/isup")){
                         xlog("L_INFO","ÏSUP Body Recieved: ID=$ci \r\n");
                        if ($isup_param(Location Number))
                        {
                                xlog("L_INFO","LAC ID in ISUP Part Found:$isup_param_str(Location Number) For $hdr(Contact)ID=$ci \r\n");
                                #append_hf("X-Location: $(isup_param(numberLocation)[0])\r\n");
                                append_hf("X-Location_Lac: $isup_param(Location Number)\r\n");
                                ##append_hf("X-Location2: $(isup_param(Location Number)[1])\r\n");
                                ##append_hf("X-Location3: $(isup_param(Location Number)[2])\r\n");
                                xlog("L_INFO","[$(rb(application/isup))]\r\n");
                                ##append_hf("X-Location4: $(isup_param(Location Number)[4])\r\n");
                                ##append_hf("X-Locationn5: $isup_param(Location Number)\r\n");
                                ##append_hf("X-Locationn63: $isup_param(Location number)[63]\r\n");
                ######SDP###############
                #$var(aline) = $(rb[0]);
                #$var(aline) = $(rb{isup.line,Called party number,0});
                #  xlog("The second a line in the ISUP  body is $var(aline)\n");
                                 xlog("Called number: $isup_param(Called party number)\n");
                                 xlog("NOA is: $isup_param_str(Called Party Number|Nature of address indicator)");
                                 xlog("CpN is: $isup_param_str(Called Party Number|Address signal)");
                                 xlog("Calling Party Number is: $isup_param(Calling Party Number|Address signal)");
                                 xlog("Location1 is: $isup_param_str(Location Number) and Contact: $hdr(Contact)\r\n");
                #xlog("Location2 is: $isup_param_str(Location Number|Location Number)");
                                # xlog("L_INFO","[$(var(hex12){s.decode.hexa})]");
                #xlog("Called Number: $isup_param_str(Called Party Number|Address signal)\r\n");
                #xlog("Calling Number: $isup_param_str(Calling Party Number|Address signal)\r\n");
                #xlog("Location is: $isup_param_str(Location Number)\r\n");
                #xlog("Location 2 :$isup_param(Location Number)[0]),$isup_param(Location Number)[1]\r\n);
                #remove_body_part("application/isup");
                        }
                        else
                                xlog("L_INFO","LAC ID In ISUP Part Not Found: ID=$ci\r\n");
               }
               else
                xlog("L_INFO","ISUP Body Part Not Found: ID=$ci\r\n");
          }


}


route[outbound]
{
xlog("L_INFO","Sending Outbound");
# avp_db_query("select peer_ip from pattern_peer where callerid='$fU' and active='Y' limit 1","$avp(peer_ip)");

#$rd="10.10.18.116";
$avp(peer_ip)=$hdr(X-TrunkOut);
xlog("L_INFO","Selected outbound destination IP: $avp(peer_ip)  Call ID:$ci");
$rd=$avp(peer_ip);
remove_hf("X-TrunkOut");
remove_hf("X-OUTBOUND");
t_on_reply("outbound");
t_relay();
exit;

}
onreply_route[outbound]{
        xlog("L_INFO", "Reply - S=$rs D=$rr F=$fu T=$tu IP=$si ID=$ci\n");
        exit;
}


route[incoming_route_media]{
        xlog("L_INFO","Media Block ID=$ci");
        if (is_method("INVITE")) {
                if (has_body("application/sdp")) {
                        #if (rtpproxy_offer("oc","10.98.16.174"))
                        #if (rtpproxy_offer())
                        if (rtpengine_offer())
                        t_on_reply("incoming_early_offer");
                }
                else {
                        t_on_reply("incoming_late_offer");
                }
    }
    if (is_method("ACK") && has_body("application/sdp"))
        #rtpproxy_answer();
        rtpengine_answer();
 }

onreply_route[incoming_early_offer]{
        if (has_body("application/sdp"))
        #rtpproxy_answer();
        rtpengine_answer();

}
onreply_route[incoming_late_offer]{
        if (has_body("application/sdp"))
        # rtpproxy_offer();
        rtpengine_offer();

}




